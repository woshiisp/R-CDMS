runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
p <- data.frame(
id = c(1, 2, 3, 4, 5),
name = c("A1", "A2", "B1", "B2", "C1"),
balance = accounting(c(52500, 36150, 25000, 18300, 7600), format = "d"),
growth = percent(c(0.3, 0.3, 0.1, 0.15, 0.15), format = "d"),
ready = formattable(c(TRUE, TRUE, FALSE, FALSE, TRUE), "yes", "no"))
df <- data.frame(
id = 1:10,
name = c("Bob", "Ashley", "James", "David", "Jenny",
"Hans", "Leo", "John", "Emily", "Lee"),
age = c(28, 27, 30, 28, 29, 29, 27, 27, 31, 30),
grade = c("C", "A", "A", "C", "B", "B", "B", "A", "C", "C"),
test1_score = c(8.9, 9.5, 9.6, 8.9, 9.1, 9.3, 9.3, 9.9, 8.5, 8.6),
test2_score = c(9.1, 9.1, 9.2, 9.1, 8.9, 8.5, 9.2, 9.3, 9.1, 8.8),
final_score = c(9, 9.3, 9.4, 9, 9, 8.9, 9.25, 9.6, 8.8, 8.7),
registered = c(TRUE, FALSE, TRUE, FALSE, TRUE, TRUE, TRUE, FALSE, FALSE, FALSE),
stringsAsFactors = FALSE)
df
table(df)
library(formattable)
formattable(df,list(
age = color_tile("white","orange"),
grade = formatter("span",style = x ~ ifelse(x == "A",style(color = "green", font.weight = "bold"),NA)),
area(col = c(test1_score,test2_score)) ~ normalize_bar("pink",20),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x)))
)
)
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x)))
))
knitr::opts_chunk$set(echo = TRUE)
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No")))
))
library(dplyr)
library(formattable)
# devtools::install_github( "htmlwidgets/sparkline" )
library(sparkline)
chickwts %>%
group_by( feed ) %>%
summarise(
weight = sprintf("`r sparkline(c(%s), type = 'box')`", paste0(weight, collapse=","))
) %>%
ungroup %>%
as.data.frame %>%
formattable(
list(
weight = function(spkline){
sapply(spkline, function(md) knitr::knit(text=md, quiet=T) )
}
))
library(dplyr)
library(formattable)
# devtools::install_github( "htmlwidgets/sparkline" )
library(sparkline)
chickwts %>%
group_by( feed ) %>%
summarise(
weight = sprintf("`r sparkline(c(%s), type = 'box')`", paste0(weight, collapse=","))
) %>%
ungroup %>%
as.data.frame %>%
formattable(
list(
weight = function(spkline){
sapply(spkline, function(md) knitr::knit(text=md, quiet=T) )
}
))
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red"))
#    x ~ icontext(ifelse(x, "ok", "remove"), #ifelse(x, "Yes", "No")))
))
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red"))
#    x ~ icontext(ifelse(x, "ok", "remove"), #ifelse(x, "Yes", "No"))
)
))
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x)))
#  registered = formatter("span",
#   style = x ~ style(color = ifelse(x, "green", #"red"))
#    x ~ icontext(ifelse(x, "ok", "remove"), #ifelse(x, "Yes", "No"))
)
))
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red"))
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No"))
library(formattable)
formattable(df, list(
age = color_tile("white", "orange"),
grade = formatter("span", style = x ~ ifelse(x == "A",
style(color = "green", font.weight = "bold"), NA)),
area(col = c(test1_score, test2_score)) ~ normalize_bar("pink", 0.2),
final_score = formatter("span",
style = x ~ style(color = ifelse(rank(-x) <= 3, "green", "gray")),
x ~ sprintf("%.2f (rank: %02d)", x, rank(-x))),
registered = formatter("span",
style = x ~ style(color = ifelse(x, "green", "red")),
x ~ icontext(ifelse(x, "ok", "remove"), ifelse(x, "Yes", "No"))
)
))
shiny::runApp()
runApp()
library(DBI)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
dbGetInfo(conn)
rs <- dbSendQuery(conn, "SELECT * FROM City LIMIT 5;")
rs
deFetch(rs)
dbFetch(rs)
dbGetQuery(conn, "SELECT * FROM City LIMIT 5;")
library(shiny)
library(DBI)
ui <- fluidPage(
numericInput("nrows", "Enter the number of rows to display:", 5),
tableOutput("tbl")
)
server <- function(input, output, session) {
output$tbl <- renderTable({
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
on.exit(dbDisconnect(conn), add = TRUE)
dbGetQuery(conn, paste0(
"SELECT * FROM City LIMIT ", input$nrows, ";"))
})
}
shinyApp(ui, server)
library(shiny)
# Define the fields we want to save from the form
fields <- c("name", "used_shiny", "r_num_years")
# Shiny app with 3 fields that the user can submit data for
shinyApp(
ui = fluidPage(
DT::dataTableOutput("responses", width = 300), tags$hr(),
textInput("name", "Name", ""),
checkboxInput("used_shiny", "I've built a Shiny app in R before", FALSE),
sliderInput("r_num_years", "Number of years using R",
0, 25, 2, ticks = FALSE),
actionButton("submit", "Submit")
),
server = function(input, output, session) {
# Whenever a field is filled, aggregate all form data
formData <- reactive({
data <- sapply(fields, function(x) input[[x]])
data
})
# When the Submit button is clicked, save the form data
observeEvent(input$submit, {
saveData(formData())
})
# Show the previous responses
# (update with current response when Submit is clicked)
output$responses <- DT::renderDataTable({
input$submit
loadData()
})
}
)
knitr::opts_chunk$set(echo = TRUE)
loadData <- function(){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- sprintf(
"SELECT * FROM %s", table)
data <- dbGetQuery(conn = conn,query)
dbDisconnect(db)
data
}
loadData <- function(){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- sprintf(
"SELECT * FROM %s", table)
data <- dbGetQuery(conn = conn,query)
dbDisconnect(db)
data
}
a <- loadData()
loadData()
loadData <- function(){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- sprintf(
"SELECT * FROM %s", table)
data <- dbGetQuery(conn = conn,query)
dbDisconnect(db)
data
}
a <- loadData()
loadData <- function(){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- sprintf(
"SELECT * FROM %s", table)
data <- dbGetQuery(conn = conn,query)
dbDisconnect(conn = conn)
data
}
data()
a <- loadData()
loadData <- function(){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- sprintf(
"SELECT * FROM %s", table)
mydata <- dbGetQuery(conn = conn,query)
dbDisconnect(conn = conn)
mydata
}
mydata
loadData <- function(){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- sprintf(
"SELECT * FROM %s", table)
mydata <- dbGetQuery(conn = conn,query)
}
mydata
a <- loadData()
loadData <- function(){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- "SELECT * FROM test"
mydata <- dbGetQuery(conn = conn,query)
dbDisconnect(conn = conn)
mydata
}
a <- loadData()
a
loadData <- function(){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- "SELECT * FROM test"
mydata <- dbGetQuery(conn = conn,query)
dbDisconnect(conn = conn)
}
b<- loadData()
b
loadData <- function(){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- "SELECT * FROM test"
mydata <- dbGetQuery(conn = conn,query)
dbDisconnect(conn = conn)
return(mydata)
}
b <- loadData()
b
loadData <- function(){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- "SELECT * FROM test"
mydata <- dbGetQuery(conn = conn,query)
dbDisconnect(conn = conn)
return(mydata)
}
saveData <- function(data){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- "insert into test VALUES mtcars[30:60,]"
dbGetQuery(conn = conn,query)
dbDisconnect(conn = conn)
}
loadData <- function(){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- "SELECT * FROM test"
mydata <- dbGetQuery(conn = conn,query)
dbDisconnect(conn = conn)
return(mydata)
}
saveData <- function(data){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- "insert into test VALUES %data%"
dbGetQuery(conn = conn,query)
dbDisconnect(conn = conn)
}
saveData(mtcars[30:50,])
saveData <- function(data){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- "insert into %s VALUES '%S',test,data"
dbGetQuery(conn = conn,query)
dbDisconnect(conn = conn)
}
saveData(mtcars[10:50,])
mtcars
str(mtcars)
c <- mtcars[-1,]
saveData <- function(data){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
query <- sprintf("INSERT INTO %s (%s) VALUES ('%s')",table,paste(names(data), collapse = ", "),
paste(data, collapse = "', '"))
dbGetQuery(conn = conn,query)
dbDisconnect(conn = conn)
}
saveData(mtcars[1:40,])
mydata <- mtcars[1:50,]
saveData(mydata)
saveData(mydata)
knitr::opts_chunk$set(echo = TRUE)
mysaveData <- function(data){
conn <- dbConnect(MariaDB(),user = 'root',password = 'yh010101',host = '127.0.0.1',port = '3306',dbname = 'yanhan')
dbWriteTable(conn=conn,"test",data,append = TRUE)
dbDisconnect(conn = conn)
}
mysaveData(mtcars[1:40,])
library(htmlwidgets)
library(sparkline)
set.seed(1234)
x <- rnorm(10)
y <- rnorm(10)
sparkline(x,y)
install.packages("rgee")
library(rgee)
ee_check()
ee_check_python()
ee_check_credentials()
ee_check_python_packages()
ee_Initialize()
ee_install(py_env = "rgee")
dfO <- data.frame(Type = c("A", "B", "C"),
Value_1 = c("1,1,2,2", "2,2,3,3", "3,3,4,4"),
Value_2 = c("0,1,2,3", "2,3,4,5", "4,5,6,7"))
library(tidyr)
library(dplyr)
df <- df0 %>% separate_rows('value_1','value_2')
df1 <- df0 %>% separate_rows(value_1,value_2)
df1 <- dfo %>% separate_rows(value_1,value_2)
df1 <- dfO %>% separate_rows(value_1,value_2)
df1 <- dfO %>% separate_rows(Value_1,Value_2)
df <- dfO %>% separate_rows(Value_1,Value_2) %>% mutate_at(vars(starts_with('Value')),funs(as.integer))
df <- dfO %>%
separate_rows(Value_1, Value_2) %>%
mutate_at(vars(starts_with('Value')) ,funs(as.integer))
df
knitr::opts_chunk$set(echo = TRUE)
library(sparkline)
library(formattable)
library(sparkline)
library(formattable)
fw <- as.htmlwidget(
formattable(
data.frame(
id = c("a","b"),
sparkline(
spk_chr(runif(10,0,10),type = 'bar'),
spk_chr(runif(10,0,10),type = 'bar')
),
stringsAsFactors = FALSE
)
)
)
library(sparkline)
library(formattable)
fw <- as.htmlwidget(
formattable(
data.frame(
id = c("a", "b"),
sparkline = c(
spk_chr(runif(10,0,10), type="bar"),
spk_chr(runif(10,0,5), type="bar")
),
stringsAsFactors = FALSE
)
)
)
spk_add_deps(fw)
library(sparkline)
library(htmltools)
library(sparkline)
library(htmltools)
div <- tags$div(
spk_chr(1:10,type = 'bar')
)
spk_add_deps(div)
library(dplyr)
library(sparkline)
library(formattable)
library(dplyr)
library(sparkline)
library(formattable)
mtcars %>% group_by(cyl) %>% summarise(
hp <- spk_chr(hp,type = 'box',chartRangeMin=0, chartRangeMax=max(mtcars$hp)),
mpg <- spk_chr(mpg,type = 'box',chartRangeMin=0, chartRangeMax=max(mtcars$mpg))
) %>% formattable()
library(dplyr)
library(sparkline)
library(formattable)
mtcars %>% group_by(cyl) %>% summarise(
hp = spk_chr(hp,type = 'box',chartRangeMin=0, chartRangeMax=max(mtcars$hp)),
mpg = spk_chr(mpg,type = 'box',chartRangeMin=0, chartRangeMax=max(mtcars$mpg))
) %>% formattable()
library(dplyr)
library(sparkline)
library(formattable)
mtcars %>% group_by(cyl) %>% summarise(
hp = spk_chr(hp,type = 'box',chartRangeMin=0, chartRangeMax=max(mtcars$hp)),
mpg = spk_chr(mpg,type = 'box',chartRangeMin=0, chartRangeMax=max(mtcars$mpg))
) %>% formattable() %>% formattable::as.htmlwidget() %>% spk_add_deps()
library(dplyr)
library(sparkline)
library(formattable)
mtcars %>% group_by(cyl) %>% summarise(
hp = spk_chr(hp,type = 'bar',chartRangeMin=0, chartRangeMax=max(mtcars$hp)),
mpg = spk_chr(mpg,type = 'box',chartRangeMin=0, chartRangeMax=max(mtcars$mpg))
) %>% formattable() %>% formattable::as.htmlwidget() %>% spk_add_deps()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
